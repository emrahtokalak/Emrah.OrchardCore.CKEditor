@model OrchardCore.ContentFields.ViewModels.EditHtmlFieldViewModel
@using OrchardCore.ContentManagement.Metadata.Models
@using OrchardCore.ContentFields.Settings
@using OrchardCore.Mvc.Utilities
@{
    var settings = Model.PartFieldDefinition.GetSettings<HtmlFieldSettings>();
    var ckeditorSettings = Model.PartFieldDefinition.GetSettings<HtmlFieldCKEditorSettings>();
    var culture = await Orchard.GetContentCultureAsync(Model.Field.ContentItem);
    var uniqueName = $"{Model.PartFieldDefinition.PartDefinition.Name}-{Model.PartFieldDefinition.Name}";
}


@* To override this with a custom build register a IResourceManifestProvider with the name CKEditor and include it in your pipeline first? or last?*@
@* <script asp-name="CKEditor" asp-src="~/Emr.OrchardCore.CKEditor/scripts/ckeditor5-custom-build-orchardcore/ckeditor.js" at="Foot" depends-on="admin"></script> *@

<script asp-name="CKEditor" asp-src="~/Emr.OrchardCore.CKEditor/scripts/ckeditor-classic-orchardcore/ckeditor.js" at="Foot" depends-on="admin"></script>

@await DisplayAsync(await New.ShortcodeModal())

<div class="form-group">
    <label asp-for="Html">@Model.PartFieldDefinition.DisplayName()</label>
    @if (culture.IsRightToLeft())
    {
        <div style="text-align:right">
            <textarea asp-for="Html" class="form-control"></textarea>
        </div>
    }
    else
    {
        <textarea asp-for="Html" class="form-control"></textarea>
    }

    @if (!String.IsNullOrEmpty(settings.Hint))
    {
        <span class="hint">@settings.Hint</span>
    }
</div>

<script at="Foot" type="text/javascript">
    var optionsTextArea = document.getElementById('@Html.IdFor(x => x.Html)');
    @* When field rendered by a flow part only the elements scripts are rendered, so the html element will not exist. *@
    if (optionsTextArea) {
        ClassicEditor
            .create(optionsTextArea, @Html.Raw(ckeditorSettings.Options))
            .then(editor => {
                editor.model.document.on( 'change:data', () => {
                    @* Update the text area source element. *@
                    editor.updateSourceElement();
                    @* Then trigger render. *@
                    $(document).trigger('contentpreview:render');
                } );            
            })
            .catch(error => {
                console.error(error);
            });
    }
</script>

